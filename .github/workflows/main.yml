###################################################################################################################################
# BUILD_INFORMATION_OUTPUT_FILE='/config/verision.js' - Places build information into built artifacts. Js,conf, html or typescript
# BRANCHES_SAVE_STARTING_WITH='origin/feature-'       - Saves artifacts to repositories although they are not on main/master.
# BRANCHES_TAG_AS_MAIN='True'                         - Do not add branch name to build artifact names.
# SLACK_CHANNELS='#team-pipeline, #generall'          - List of Slack channels for user information
# DOCKER_BUILD_ARGS='args ...'                        - Docker build args if you have any.
#
####################################################################################################################################
#
#  Need secrets for testing?
#
# Secrets used by unit tests and integration tests are put into a in secret in this repositorys:
# 
# / Settings / Secrets / Repository secrets / 'EVOLENE_TEST_SECRETS'.
# 
# The secrets envs that your test need must be key-value, either on one line ore separate lines.
# These secret envs will then be accessable in  docker-compose-unit-tests.yml and docker-compose-integration-tests.yml.
# like 'FLOTTSBRO_API_KEY' here: https://github.com/KTH/kth-azure-app/blob/master/docker-compose-integration-tests.yml#L22
# 
# Example EVOLENE_TEST_SECRETS content:
# ______________________________________________________
# FLOTTSBRO_API_KEY=very-s3cr3t-k3y
# DB_PWD=dont-tell-any-one
# ___________________________
#
#
# If you mount tests into your Docker image at test runtime, then the volume mapping
# has to contain a env ${WORKSPACE} with the path to the test files like.
#
# ___________________________
# volumes:
#      - ${WORKSPACE}/tests:/tests
# ___________________________
#
# For more information see https://github.com/KTH/evolene/blob/master/README.md
####################################################################################################################################
name: Evolene CI

on:  
  push:
  pull_request:
    branches:
      - master
      - main
    paths-ignore:
          - '*.md'
          - '*.png'
  workflow_dispatch:

jobs:
  Evolene:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Run Evolene CI pipeline steps
        shell: bash
        env:
          SLACK_CHANNELS: "#team-pipeline-build"
          BUILD_INFORMATION_OUTPUT_FILE: "/config/version.js"
          EVOLENE_TEST_SECRETS: "${{secrets.EVOLENE_TEST_SECRETS}}"
        run: |
          ${{ secrets.EVOLENE_RUN_COMMAND }}
